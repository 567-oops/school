#include <iostream>
using namespace std;
void inputarray(int arr[],int size) {
    for(int i=0;i<size;i++) {
        cin>>arr[i];
    }
}

void displayarray(int arr[],int size) {
    for(int i=0;i<size-1;i++) {
        cout<<arr[i]<<", ";
    }
    cout<<arr[size-1]<<endl;
}

void Insertionsort(int arr[],int size,int direction) {
    int i,j,temp;
    for(i=1;i<size;i++){
        temp=arr[i];
        cout<<"第"<<i<<"輪排序"<<endl;
        for(j=i-1;j>=0&&(direction == 1&&temp<arr[j]||direction==0&&temp>arr[j]);j--){
            arr[j+1]=arr[j];
            displayarray(arr,size);
         }
         j++;
         arr[j]=temp;
         displayarray(arr,size);
    }
}

int Linearsearch(int arr[],int size,int target){
    for(int i=0;i<size;i++){
        cout << "測試位置：" << i << ", 測試數值：" << arr[i] << " / ";
        if(arr[i] == target){
            cout << arr[i] << "=" << target << endl;
            return i;
        }
        else{
            cout << arr[i] << "!=" << target << endl;
        }
    }
    return -1;
}
int Binarysearch(int arr[], int size, int target, int direction){
    int left= 0, right = size-1, mid;
    while(left<=right){
        mid = (left+right)/2;
        cout << "   left:" << left << ", right:" << right << endl;
        cout << "       測試數值：" << arr[mid] << ", 目標數值：" << target << " / ";
        if(arr[mid] == target){
            cout << arr[mid] << "=" << target << endl;
            return mid;
        }
        else if(arr[mid] > target){

            cout << arr[mid] << ">" << target << endl;
            if(direction==1){

                right = mid - 1;
            }
            else{

                left = mid + 1;
            }
        }
        else if(arr[mid] < target){

            cout << arr[mid] << "<" << target << endl;
            if(direction==1){

                left = mid + 1;
            }
            else{

                right = mid - 1;
            }
        }
    }
    return -1;
}

int Interpolationsearch(int arr[], int size, int target, bool direction){
    int left = 0, right = size-1, mid;
    while(left<=right){
        if(arr[right] == arr[left]){
            mid = left;
        }
        else{
            mid = left + (right - left) * (target - arr[left]) / (arr[right] - arr[left]);

        }
        cout << "   left:" << left << ", right:" << right << endl;
        cout << "       測試數值：" << arr[mid] << ", 目標數值：" << target << " / ";
        if(arr[mid] == target){
            cout << arr[mid] << "=" << target << endl;
            return mid;
        }
        else if(arr[mid] > target){
            cout << arr[mid] << ">" << target << endl;
            if(direction){
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        else if(arr[mid] < target){
            cout << arr[mid] << "<" << target << endl;
            if(direction){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
    }
    return -1;
}

void Search(int arr[], int size, int direction){
    int target, cont=1, ind;
    while(cont==1){
        cout << "請輸入要搜尋的數字：" << endl;
        cin >> target;
        cout << "使用線性/循序搜尋：" << endl;
        ind = Linearsearch(arr, size, target);
        if(ind<0){
            cout << "   找不到" << target << endl;
        }
        else{
            cout << "   在第" << ind << "項找到" << target << endl;
        }
        cout << "使用二元搜尋：" << endl;
        ind = Binarysearch(arr, size, target, direction);
        if(ind<0){
            cout << "   找不到" << target << endl;
        }
        else{
            cout << "   在第" << ind << "項找到" << target << endl;
        }
        cout << "使用內插搜尋：" << endl;
        ind = Interpolationsearch(arr, size, target, direction);
        if(ind<0){
            cout << "   找不到" << target << endl;
        }
        else{
            cout << "   在第" << ind << "項找到" << target << endl;
        }
        cout << "是否要繼續搜尋？(要則輸入1，否則輸入0)：";
        cin  >> cont;
        cout << endl;
    }
}


int main() {
    int size;
    int sortDirection;
    cout << "輸入陣列大小：";
    cin >> size;
    int arr[size];
    cout << "輸入陣列每一項的數字，以空格隔開：";
    inputarray(arr, size);
    displayarray(arr, size);
    cout << "輸入排序方向(小到大輸入1，大到小輸入0)：";
    cin >> sortDirection;
    cout << "使用插入排序法排序陣列" << endl;

    Insertionsort(arr, size, sortDirection);
    cout << "排序後的陣列：";
    displayarray(arr, size);
    cout << endl;
    Search(arr, size, sortDirection);
    return 0;
}
